<Chapter><Heading>The underlying functions</Heading>

<Section><Heading>Nilpotent Quotient Systems for invariant L-presentations</Heading>

For an invariantly L-presented group <M>G</M>, our algorithm computes
a nilpotent presentation for <M>G/\gamma_{c+1}(G)</M> by computing a
<A>weighted nilpotent quotient system</A> for <M>G/G'</M> and
extending it inductively to a weighted nilpotent quotient system for
<M>G/\gamma_{c+1}(G)</M>.<P/>

In the &lpres; package, a weighted nilpotent quotient system is a record
containing the following entries:
<List>
<Mark>Lpres</Mark><Item>the invariantly L-presented group <M>G</M>.</Item>

<Mark>Pccol</Mark><Item>`FromTheLeftCollector' of the nilpotent
quotient represented by this quotient system.</Item>

<Mark>Imgs</Mark><Item>the images of the generators of the L-presented
group <M>G</M> under the epimorphism onto the nilpotent quotient
<A>Pccol</A>. For each generator of <M>G</M> there is an integer or a
generator exponent list. If the image is an integer <A>int</A>, the
image is a definition of the <A>int</A>-th generator of the nilpotent
presentation <A>Pccol</A>.</Item>

<Mark>Epimorphism</Mark><Item>an epimorphism from the L-presented
group <M>G</M> onto its nilpotent quotient <A>Pccol</A> with the
images of the generators given by <A>Imgs</A>.</Item>

<Mark>Weights</Mark><Item>a list of the weight of each generator of
the nilpotent presentation <A>Pccol</A>.</Item>

<Mark>Definitions</Mark><Item>the definition of each generator of
<A>Pccol</A>. Each generator in the quotient system has a definition
as an image or as a commutator of the form <M>[a_j,a_i]</M> where
<M>a_j</M> and <M>a_i</M> are generators of a certain weight. If the
<A>i</A>-th entry is an integer, the <A>i</A>-th generator of
<A>Pccol</A> has a definition as an image. Otherwise, the <A>i</A>-th
entry is a <M>2</M>-tuple <M>[k,l]</M> and the <A>i</A>-th generator
has a definition as commutator <M>[a_k,a_l]</M>.</Item>
</List>

A weighted nilpotent quotient system of an invariantly L-presented group 
can be computed with the following functions.

<ManSection><Oper Name="InitQuotientSystem" Arg="lpgroup"/>
<Description>
computes a weighted nilpotent quotient system for the abelian quotient
of the L-presented group <A>lpgroup</A>.
</Description>
</ManSection>

<ManSection><Oper Name="ExtendQuotientSystem" Arg="QS"/>
<Description>
extends the weighted nilpotent quotient system <A>QS</A> for a
class-<M>c</M> quotient of an invariantly L-presented group to a
weighted nilpotent quotient system of its class-<M>c+1</M>
quotient.

<Example><![CDATA[
gap> G := ExamplesOfLPresentations( 1 );
<L-presented group on the generators [ a, b, c, d ]>
gap> Q := InitQuotientSystem( G );
rec( Lpres := <L-presented group on the generators [ a, b, c, d ]>, 
  Pccol := <<from the left collector with 3 generators>>, 
  Imgs := [ 1, [ 2, 1, 3, 1 ], 2, 3 ], Epimorphism := [ a, b, c, d ] -> 
    [ g1, g2*g3, g2, g3 ], Weights := [ 1, 1, 1 ], Definitions := [ 1, 3, 4 ] 
 )
gap> ExtendQuotientSystem( Q );
rec( Lpres := <L-presented group on the generators [ a, b, c, d ]>, 
  Pccol := <<from the left collector with 5 generators>>, 
  Imgs := [ 1, [ 2, 1, 3, 1 ], 2, 3 ], 
  Definitions := [ 1, 3, 4, [ 2, 1 ], [ 3, 1 ] ], 
  Weights := [ 1, 1, 1, 2, 2 ], Epimorphism := [ a, b, c, d ] -> 
    [ g1, g2*g3, g2, g3 ] )
]]></Example>
</Description>
</ManSection>
</Section>

<Section><Heading>Attributes of L-presented groups related with the nilpotent quotient algorithm</Heading><P/>

To avoid repeated extensions of a weighted nilpotent quotient system
the largest known quotient system is stored as an attribute of the
invariantly L-presented group. For non-invariantly L-presented groups
(or groups which are not known to be invariantly L-presented) the known
epimorphisms onto the nilpotent quotients are stored as an attribute.

<ManSection><Attr Name="NilpotentQuotientSystem" Arg="lpgroup"/>
<Description>
stores the largest known weighted nilpotent quotient system of an
invariantly L-presented group.

<Example><![CDATA[
gap> G := ExamplesOfLPresentations( 1 );;
gap> NilpotentQuotient( G, 5 );
Pcp-group with orders [ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 ]
gap> NilpotentQuotientSystem( G );
rec( Lpres := <L-presented group on the generators [ a, b, c, d ]>, 
  Pccol := <<from the left collector with 10 generators>>, 
  Imgs := [ 1, [ 2, 1, 3, 1 ], 2, 3 ], 
  Definitions := [ 1, 3, 4, [ 2, 1 ], [ 3, 1 ], [ 4, 2 ], [ 4, 3 ], [ 7, 1 ], 
      [ 8, 2 ], [ 8, 3 ] ], Weights := [ 1, 1, 1, 2, 2, 3, 3, 4, 5, 5 ], 
  Epimorphism := [ a, b, c, d ] -> [ g1, g2*g3, g2, g3 ] )
gap> NilpotencyClassOfGroup( PcpGroupByCollectorNC( last.Pccol ) );
5
]]></Example>
</Description>
</ManSection>

<ManSection><Attr Name="NilpotentQuotients" Arg="lpgroup"/>
<Description>
stores all known epimorphisms onto the nilpotent quotients of
<A>lpgroup</A>.  The nilpotent quotients are accessible by the
operation `Range'.

<Example><![CDATA[
gap> G:=ExamplesOfLPresentations( 3 );;
gap> HasIsInvariantLPresentation( G );
false
gap> NilpotentQuotient( G, 3 );
Pcp-group with orders [ 0, 2, 2, 2 ]
gap> NilpotentQuotients( G );
[ [ a, t, u ] -> [ g2, g1, g2 ], [ a, t, u ] -> [ g2, g1, g2 ],
  [ a, t, u ] -> [ g2, g1, g2 ] ]
gap> Range( last[2] );
Pcp-group with orders [ 0, 2, 2 ]
]]></Example>

The underlying invariant L-presentation has stored its largest
weighted nilpotent quotient system as an attribute.
<Example><![CDATA[
gap> NilpotentQuotientSystem( UnderlyingInvariantLPresentation( G ) );
rec( Lpres := <L-presented group on the generators [ a, t, u ]>,
  Pccol := <<from the left collector with 9 generators>>, Imgs := [ 1, 2, 3 ],
  Definitions := [ 1, 2, 3, [ 2, 1 ], [ 3, 2 ], [ 4, 1 ], [ 4, 2 ], [ 5, 2 ],
      [ 5, 3 ] ], Weights := [ 1, 1, 1, 2, 2, 3, 3, 3, 3 ],
  Epimorphism := [ a, t, u ] -> [ g1, g2, g3 ] )
]]></Example>
</Description>
</ManSection>

</Section>

<Section><Heading>The Info-Class InfoLPRES</Heading><P/>

To get some information about the progress of the algorithm,
one can use the info class `InfoLPRES'.

<ManSection><InfoClass Name="InfoLPRES"/>
<Description>
is the info class of the &lpres;-package. If the info-level is <M>1</M>, the
info-class gives further information on the progress of the nilpotent
quotient algorithm for L-presented groups. The info-level <M>2</M> also
includes some information on the runtime of our algorithm while the
info-level <M>3</M> is mainly used for debugging-purposes. An example of such
a session for the Grigorchuk group is shown below:

<Example><![CDATA[
gap> SetInfoLevel( InfoLPRES, 1 );;
gap> G:=ExamplesOfLPresentations( 1 );
#I  The Grigorchuk group on 4 generators
<L-presented group on the generators [ a, b, c, d ]>
gap> NilpotentQuotient( G, 3 );
#I  Class 1: 3 generators with relative orders: [ 2, 2, 2 ]
#I  Class 2: 2 generators with relative orders: [ 2, 2 ]
#I  Class 3: 2 generators with relative orders: [ 2, 2 ]
Pcp-group with orders [ 2, 2, 2, 2, 2, 2, 2 ]
gap> SetInfoLevel( InfoLPRES, 2 );
gap> NilpotentQuotient( G, 5 );
#I  Time spent for spinning algo:  0:00:00.004
#I  Class 4: 1 generators with relative orders: [ 2 ]
#I  Runtime for this step  0:00:00.028
#I  Time spent for spinning algo:  0:00:00.008
#I  Class 5: 2 generators with relative orders: [ 2, 2 ]
#I  Runtime for this step  0:00:00.036
Pcp-group with orders [ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 ]
]]></Example>
</Description>
</ManSection>

<ManSection><Var Name="InfoLPRES_MAX_GENS"/>
<Description>
this global variable sets the limit of generators whose relative order
will be shown on each step of the nilpotent quotient algorithm, if the
info-level of `InfoLPRES' is positive.
</Description>
</ManSection>
</Section>
</Chapter>
